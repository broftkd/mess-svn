#ifndef __EMU_MACHINE_AVR8_H__
#define __EMU_MACHINE_AVR8_H__

// Helpful enums and defines for the Atmel 8-bit AVR series of microcontrollers

enum
{
	AVR8_REG_R0 = 0,
	AVR8_REG_R1,
	AVR8_REG_R2,
	AVR8_REG_R3,
	AVR8_REG_R4,
	AVR8_REG_R5,
	AVR8_REG_R6,
	AVR8_REG_R7,
	AVR8_REG_R8,
	AVR8_REG_R9,
	AVR8_REG_R10,
	AVR8_REG_R11,
	AVR8_REG_R12,
	AVR8_REG_R13,
	AVR8_REG_R14,
	AVR8_REG_R15,
	AVR8_REG_R16,
	AVR8_REG_R17,
	AVR8_REG_R18,
	AVR8_REG_R19,
	AVR8_REG_R20,
	AVR8_REG_R21,
	AVR8_REG_R22,
	AVR8_REG_R23,
	AVR8_REG_R24,
	AVR8_REG_R25,
	AVR8_REG_R26,
	AVR8_REG_R27,
	AVR8_REG_R28,
	AVR8_REG_R29,
	AVR8_REG_R30,
	AVR8_REG_R31,

	AVR8_REG_PINB = 0x23,
	AVR8_REG_DDRB,
	AVR8_REG_PORTB,
	AVR8_REG_PINC,
	AVR8_REG_DDRC,
	AVR8_REG_PORTC,
	AVR8_REG_PIND,
	AVR8_REG_DDRD,
	AVR8_REG_PORTD,

	AVR8_REG_TIFR0 = 0x35,
	AVR8_REG_TIFR1,
	AVR8_REG_TIFR2,

	AVR8_REG_PCIFR = 0x3b,
	AVR8_REG_EIFR,
	AVR8_REG_EIMSK,
	AVR8_REG_GPIOR0,
	AVR8_REG_EECR,
	AVR8_REG_EEDR,
	AVR8_REG_EEARL,
	AVR8_REG_EEARH,
	AVR8_REG_GTCCR,
	AVR8_REG_TCCR0A,
	AVR8_REG_TCCR0B,
	AVR8_REG_TCNT0,
	AVR8_REG_OCR0A,
	AVR8_REG_OCR0B,

	AVR8_REG_GPIOR1 = 0x4a,
	AVR8_REG_GPIOR2,
	AVR8_REG_SPCR,
	AVR8_REG_SPSR,
	AVR8_REG_SPDR,

	AVR8_REG_ACSR = 0x50,

	AVR8_REG_SMCR = 0x53,
	AVR8_REG_MCUSR,
	AVR8_REG_MCUCR,

	AVR8_REG_SPMCSR = 0x57,

	AVR8_REG_SPL = 0x5d,
	AVR8_REG_SPH,
	AVR8_REG_SREG,
	AVR8_REG_WDTCSR,
	AVR8_REG_CLKPR,

	AVR8_REG_PRR = 0X64,

	AVR8_REG_OSCCAL = 0X66,

	AVR8_REG_PCICR = 0X68,
	AVR8_REG_EICRA,

	AVR8_REG_PCMSK0 = 0X6B,
	AVR8_REG_PCMSK1,
	AVR8_REG_PCMSK2,
	AVR8_REG_TIMSK0,
	AVR8_REG_TIMSK1,
	AVR8_REG_TIMSK2,

	AVR8_REG_ADCL = 0X78,
	AVR8_REG_ADCH,
	AVR8_REG_ADCSRA,
	AVR8_REG_ADCSRB,
	AVR8_REG_ADMUX,

	AVR8_REG_DIDR0 = 0x7e,
	AVR8_REG_DIDR1,
	AVR8_REG_TCCR1A,
	AVR8_REG_TCCR1B,
	AVR8_REG_TCCR1C,

	AVR8_REG_TCNT1L = 0x84,
	AVR8_REG_TCNT1H,
	AVR8_REG_ICR1L,
	AVR8_REG_ICR1H,
	AVR8_REG_OCR1AL,
	AVR8_REG_OCR1AH,
	AVR8_REG_OCR1BL,
	AVR8_REG_OCR1BH,

	AVR8_REG_TCCR2A = 0xb0,
	AVR8_REG_TCCR2B,
	AVR8_REG_TCNT2,
	AVR8_REG_OCR2A,
	AVR8_REG_OCR2B,

	AVR8_REG_ASSR = 0xb6,

	AVR8_REG_TWBR = 0xb8,
	AVR8_REG_TWSR,
	AVR8_REG_TWAR,
	AVR8_REG_TWDR,
	AVR8_REG_TWCR,
	AVR8_REG_TWAMR,

	AVR8_REG_UCSR0A = 0xc0,
	AVR8_REG_UCSR0B,
	AVR8_REG_UCSR0C,

	AVR8_REG_UBRR0L = 0xc4,
	AVR8_REG_UBRR0H,
	AVR8_REG_UDR0
};

#define AVR8_OCR1BH				(state->regs[AVR8_REG_OCR1BH])
#define AVR8_OCR1BL				(state->regs[AVR8_REG_OCR1BL])
#define AVR8_OCR1AH				(state->regs[AVR8_REG_OCR1AH])
#define AVR8_OCR1AL				(state->regs[AVR8_REG_OCR1AL])
#define AVR8_ICR1H				(state->regs[AVR8_REG_ICR1H])
#define AVR8_ICR1L				(state->regs[AVR8_REG_ICR1L])
#define AVR8_TCNT1H				(state->regs[AVR8_REG_TCNT1H])
#define AVR8_TCNT1L				(state->regs[AVR8_REG_TCNT1L])
#define AVR8_TCCR1B				(state->regs[AVR8_REG_TCCR1B])
#define AVR8_TCCR1A				(state->regs[AVR8_REG_TCCR1A])
#define AVR8_TIMSK1				(state->regs[AVR8_REG_TIMSK1])
#define AVR8_TIMSK1_OCIE1A  	0x02
#define AVR8_TIMSK1_OCIE1B  	0x04
#define AVR8_OCR1A				((AVR8_OCR1AH << 8) | AVR8_OCR1AL)
#define AVR8_OCR1B				((AVR8_OCR1BH << 8) | AVR8_OCR1BL)
#define AVR8_ICR1				((AVR8_ICR1H  << 8) | AVR8_ICR1L)
#define AVR8_TCNT1				((AVR8_TCNT1H << 8) | AVR8_TCNT1L)
#define AVR8_WGM1				(((AVR8_TCCR1B & 0x18) >> 1) | (AVR8_TCCR1A & 0x03))
#define AVR8_TCNT1_DIR			(state->tcnt1_direction)

enum
{
	AVR8_WGM1_NORMAL = 0,
	AVR8_WGM1_PWM_8_PC,
	AVR8_WGM1_PWM_9_PC,
	AVR8_WGM1_PWM_10_PC,
	AVR8_WGM1_CTC_OCR,
	AVR8_WGM1_FAST_PWM_8,
	AVR8_WGM1_FAST_PWM_9,
	AVR8_WGM1_FAST_PWM_10,
	AVR8_WGM1_PWM_PFC_ICR,
	AVR8_WGM1_PWM_PFC_OCR,
	AVR8_WGM1_PWM_PC_ICR,
	AVR8_WGM1_PWM_PC_OCR,
	AVR8_WGM1_CTC_ICR,
	AVR8_WGM1_RESERVED,
	AVR8_WGM1_FAST_PWM_ICR,
	AVR8_WGM1_FAST_PWM_OCR
};

#endif // __EMU_MACHINE_AVR8_H__
